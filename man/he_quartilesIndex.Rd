% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/help_quartilesIndex.R
\name{he_quartilesIndex}
\alias{he_quartilesIndex}
\title{Quartile Numeric Based on Index}
\usage{
he_quartilesIndex(
  data,
  indexMethod = c("inclusive", "exclusive", "sas1", "sas4", "hl", "excel", "hf8",
    "hf9"),
  q1Frac = c("linear", "down", "up", "bankers", "nearest", "halfdown", "midpoint"),
  q1Int = c("int", "midpoint"),
  q3Frac = c("linear", "down", "up", "bankers", "nearest", "halfdown", "midpoint"),
  q3Int = c("int", "midpoint")
)
}
\arguments{
\item{data}{dataframe with scores as numbers}

\item{indexMethod}{optional to indicate which type of indexing to use}

\item{q1Frac}{optional to indicate what type of rounding to use for first quarter}

\item{q1Int}{optional to indicate the use of the integer or the midpoint method for first quarter}

\item{q3Frac}{optional to indicate what type of rounding to use for third quarter}

\item{q3Int}{optional to indicate the use of the integer or the midpoint method for third quarter}
}
\value{
A dataframe with:
\item{q1}{the first (lower) quartile}
\item{q3}{the third (upper/higher) quartile}
}
\description{
Helper function for \code{\link{me_quartiles}} to return the quartile as a number of the first and third quartile with different methods
of rounding.
}
\details{
If \strong{the index is an integer} often that integer will be used to find the corresponding value in the sorted data.
However, in some rare methods they argue to take the midpoint between the found index and the next one, i.e. to use:
\deqn{iQ_i = iQ_i + \frac{1}{2}}

If the index has a fractional part, we could use linear interpolation. It can be written as:
\deqn{X\left[\lfloor iQ_i \rfloor\right] + \frac{iQ_i - \lfloor iQ_i \rfloor}{\lceil iQ_i \rceil - \lfloor iQ_i \rfloor} \times \left(X\left[\lceil iQ_i \rceil\right] - X\left[\lfloor iQ_i \rfloor\right]\right)}
Where:
\itemize{
\item \eqn{X\left[x\right]} is the x-th score of the sorted scores
\item  \eqn{\lfloor\dots\rfloor} is the function to always round down
\item  \eqn{\lceil\dots\rceil} is the function to always round up
}

Or we can use 'rounding'. But there are different versions of rounding. Besides the already mentioned round
down and round up versions:
\itemize{
\item \eqn{\lfloor\dots\rceil} to indicate rounding to the nearest even integer. A value of 2.5 gets rounded to 2, while 1.5 also gets rounded to 2. This is also referred to as \emph{bankers} method.
\item  \eqn{\left[\dots\right]} to indicate rounding to the nearest integer. A value that ends with .5 is then always rounded up.
\item  \eqn{\left< \dots\right>} to indicate to round a value ending with .5 always down
}
or even use the midpoint again i.e.:
\deqn{\frac{\lfloor iQ_i \rfloor + \lceil iQ_i \rceil}{2}}
}
\author{
P. Stikker. \href{https://PeterStatistics.com}{Companion Website}, \href{https://www.youtube.com/stikpet}{YouTube Channel}
}
